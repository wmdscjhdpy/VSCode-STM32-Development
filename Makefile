##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [2.30.0] date: [Thu Mar 21 10:07:04 CST 2019] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
#为了保证后面的调试，Target的名称必须是STM32Target
TARGET = STM32Target


######################################
# building variables
######################################
# debug build?
# 是否嵌入调试代码段
DEBUG = 1
# optimization
# 优化等级设置
OPT = -O0


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
#以C格式编译的C文件在这里导入 注意 如果使用C++编译的话，需要将Src里面的文件列表剪切到CPP_SOURCES内
C_SOURCES =  \
$(wildcard Drivers/STM32F4xx_HAL_Driver/Src/*.c) 

#如果使用了FreeRTOS，则应该导入这些文件 如果没有就注释掉它
C_SOURCES += \
$(wildcard Middlewares/Third_Party/FreeRTOS/Source/*.c) \
Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c \
Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c \
Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c 

#以C++格式编译的C文件在这里导入 不需要C++编译的话这里可以为空
CPP_SOURCES = \
$(wildcard Src/*.c) 

#以C++格式编译的CPP文件在这里导入 不需要C++编译的话这里可以为空
RAW_CPP_SOURCES = \
$(wildcard Src/*.cpp) \
My_Driver/Car_Driver.cpp \
My_Driver/Can_Driver.cpp 

#汇编文件在这里导入
ASM_SOURCES =  \
startup_stm32f405xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
CPP = $(GCC_PATH)/$(PREFIX)g++
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
CPP = $(PREFIX)g++
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
# 在选用不同的CPU的同时需要修改此处
CPU = -mcpu=cortex-m4

# fpu
#是否使用硬件浮点
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
# 注意更改芯片的同时这里也要改
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F405xx   


# AS includes
AS_INCLUDES =  \
-I\Inc

# C includes
# 头文件目录
C_INCLUDES =  \
-IInc \
-IDrivers/STM32F4xx_HAL_Driver/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-IMiddlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F \
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include \
-IMiddlewares/Third_Party/FreeRTOS/Source/include \
-IMiddlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS \
-IDrivers/CMSIS/Include \
-IMy_Driver


#下面的代码，除非自己很清楚再干什么，否则就不建议再更改了
# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F405RGTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
#LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections
LDFLAGS = $(MCU) -specs=nosys.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

# list of cpp objects
#.c的C++规则
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.c=.obj)))
vpath %.c $(sort $(dir $(CPP_SOURCES)))
#.cpp的C++规则
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(RAW_CPP_SOURCES:.cpp=.oo)))
vpath %.cpp $(sort $(dir $(RAW_CPP_SOURCES)))

# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

#G++
$(BUILD_DIR)/%.obj: %.c Makefile | $(BUILD_DIR) 
	@echo "compiling" $<
	@$(CPP) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@
	
$(BUILD_DIR)/%.oo: %.cpp Makefile | $(BUILD_DIR) 
	@echo "compiling" $<
	@$(CPP) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@
	
#GCC 
$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	@echo "compiling" $<
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

#ASM
$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@echo "compiling" $<
	@$(AS) -c $(CFLAGS) $< -o $@

#ELF
$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@echo "building" $<
	@$(CPP) $(OBJECTS) $(LDFLAGS) -o $@
	@$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
